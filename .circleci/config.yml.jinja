# WARNING: config.yml file is generated from config.yml.jinja
---
version: 3
jobs:
    tracetool:
        docker:
            - image: codaprotocol/coda:toolchain-rust-b2e9fa0d25f2f9b7c7f01d6f8727e2c6c7690712
        steps:
            - checkout
            - run: git submodule sync && git submodule update --init --recursive
            - run:
                  name: Build trace-tool
                  command: cd src/app/trace-tool && cargo build --frozen

    lint:
        docker:
            - image: codaprotocol/coda:toolchain-b2e9fa0d25f2f9b7c7f01d6f8727e2c6c7690712
        steps:
            - checkout
            - run: git submodule sync && git submodule update --init --recursive
            - run:
                  name: OCamlformat (make check-format)
                  command: eval `opam config env` && make check-format
            - run:
                  name: Snarky tracks master (make check-snarky-submodule)
                  command: make check-snarky-submodule

    build-macos:
        macos:
            xcode: "10.1.0"
        working_directory: /Users/distiller/coda
        environment:
            HOMEBREW_LOGS: /Users/distiller/homebrew.log
            OPAMYES: 1
        steps:
            - run:
                name: Make /nix paths
                command: |
                    sudo mkdir /nix
                    sudo chown distiller /nix
            - checkout
            - restore_cache:
                  keys:
                      - homebrew-v1-{{'{{'}} checksum "scripts/macos-setup.sh" {{'}}'}}
                      - homebrew-v1-
            - restore_cache:
                  keys:
                      - opam-v1-{{'{{'}} checksum "src/opam.export" {{'}}'}}
                      - opam-v1-
            - restore_cache:
                  keys:
                      - nix-v3-{{'{{'}} checksum "src/app/kademlia-haskell/packages.nix" {{'}}'}}
                      - nix-v3-
                      - nix-v2-		      
            - run: git submodule sync && git submodule update --init --recursive
            - run:
                  name: Download Deps -- make macos-setup-download
                  command: make macos-setup-download
            - run:
                  name: Compile Deps -- make macos-setup-compile
                  command: make macos-setup-compile
            - save_cache:
                  key: homebrew-v1-{{'{{'}} checksum "scripts/macos-setup.sh" {{'}}'}}
                  paths:
                      - "/usr/local/Homebrew"
                      - "/Users/distiller/Library/Caches/Homebrew"
            - save_cache:
                  key: opam-v1-{{'{{'}} checksum "src/opam.export" {{'}}'}}
                  paths:
                      - "/Users/distiller/.opam"
            - save_cache:
                  key: nix-v3-{{'{{'}} checksum "src/app/kademlia-haskell/packages.nix" {{'}}'}}
                  paths:
                      - "/nix"
            - run:
                  name: Build OCaml
                  command: eval `opam config env` && make build 2>&1 | tee /tmp/buildocaml.log
            - run:
                  name: Run all tests (on master)
                  command: echo "FIXME Tests not yet working on mac"

    {%- for profile in build_profiles %}
    build_{{profile}}:
        resource_class: large
        docker:
            - image: codaprotocol/coda:toolchain-b2e9fa0d25f2f9b7c7f01d6f8727e2c6c7690712
        environment:
            DUNE_PROFILE: {{profile}}
        steps:
            - checkout
            - run: mkdir -p /tmp/artifacts
            - run: git submodule sync && git submodule update --init --recursive
            - run:
                  name: Download Stable Proving Keys
                  command: scripts/getkeys.sh
            - run:
                  name: Build OCaml
                  command: eval `opam config env` && make build 2>&1 | tee /tmp/artifacts/buildocaml.log
            - run:
                  name: Build deb Package with keys
                  command: make deb
            - run:
                  name: Build provingkeys
                  command: make provingkeys
            - run:
                  name: Store Genesis keys
                  command: make genesiskeys
            - run:
                  name: Upload deb to repo
                  command: make publish_deb
            - store_artifacts:
                  path: /tmp/artifacts
    {%- endfor %}

    test-unit-test:
        resource_class: large
        docker:
            - image: codaprotocol/coda:toolchain-b2e9fa0d25f2f9b7c7f01d6f8727e2c6c7690712
        steps:
            - checkout
            - run: git submodule sync && git submodule update --init --recursive
            - run:
                  name: Test make test-runtest
                  command: source ~/.profile && DUNE_PROFILE=test_posig_snarkless MYPROCS=8 make test-runtest

    {%-for test in tests%}
    test-{{test.name}}:
        resource_class: large
        docker:
            - image: codaprotocol/coda:toolchain-b2e9fa0d25f2f9b7c7f01d6f8727e2c6c7690712
        steps:
            - checkout
            - run: git submodule sync && git submodule update --init --recursive
            - run:
                  name: Check .circleci Render
                  command: make check-render-circleci
            - run:
                  name: Build OCaml
                  command: eval `opam config env` && DUNE_PROFILE={{test.config}} make build 2>&1 | tee /tmp/buildocaml.log
            {%- for action in test.actions %}
            - run:
                  name: Running test - {{ test.friendly }} | {{ action }}
                  command: source ~/.profile && export DUNE_PROFILE={{test.config}} && source scripts/test_all.sh && cd src/ && 'run_integration_test' '{{ action }}'
            {% endfor %}
    {%- endfor %}

workflows:
    version: 2
    coda_parallel:
        jobs:
            - lint
            - build-macos
            {%- for profile in build_profiles %}
            - build_{{profile}}
            {%- endfor %}
            {%- for test in tests %}
            - test-{{test.name}}
            {%- endfor %}
            - test-unit-test
            - tracetool
